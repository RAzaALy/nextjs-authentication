{"ast":null,"code":"import { getSession } from \"next-auth/client\";\nimport { connectToDatabase } from \"../../../lib/db\";\nimport { hassPassword, verifyPassword } from \"../../../lib/auth\";\n\nasync function handler(req, res) {\n  if (req.method !== \"PATCH\") {\n    return;\n  }\n\n  const session = await getSession({\n    req: req\n  });\n\n  if (!session) {\n    res.status(401).json({\n      message: \"Authentication is missing !\"\n    });\n    return;\n  }\n\n  const userEmail = session.user.email;\n  const oldPassword = req.body.oldPassword;\n  const newPassword = req.body.newPassword;\n  const client = await connectToDatabase();\n  const userCollection = client.db().collection(\"users\");\n  const user = await userCollection.findOne({\n    email: userEmail\n  });\n\n  if (!user) {\n    res.status(404).json({\n      message: \"User Not Found !\"\n    });\n    client.close();\n    return;\n  }\n\n  const currentPassword = user.password;\n  const passwordAreEqual = await verifyPassword(oldPassword, currentPassword);\n\n  if (!passwordAreEqual) {\n    client.close();\n    res.status(403).json({\n      message: \"Invalid Password !\"\n    });\n    return;\n  }\n\n  const hashedPassword = await hassPassword(newPassword);\n  const result = await userCollection.updateOne({\n    email: userEmail\n  }, {\n    $set: {\n      password: hashedPassword\n    }\n  });\n  client.close();\n  res.status(200).json({\n    message: \"Password Updated !\"\n  });\n}\n\nexport default handler;","map":{"version":3,"sources":["/media/raza/C282A19582A18E8B/Web Developer Journey/NextJs/nextjs-authentication/pages/api/user/change-password.js"],"names":["getSession","connectToDatabase","hassPassword","verifyPassword","handler","req","res","method","session","status","json","message","userEmail","user","email","oldPassword","body","newPassword","client","userCollection","db","collection","findOne","close","currentPassword","password","passwordAreEqual","hashedPassword","result","updateOne","$set"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,mBAA7C;;AACA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,OAAnB,EAA4B;AAC1B;AACD;;AAED,QAAMC,OAAO,GAAG,MAAMR,UAAU,CAAC;AAAEK,IAAAA,GAAG,EAAEA;AAAP,GAAD,CAAhC;;AAEA,MAAI,CAACG,OAAL,EAAc;AACZF,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACD;;AAED,QAAMC,SAAS,GAAGJ,OAAO,CAACK,IAAR,CAAaC,KAA/B;AACA,QAAMC,WAAW,GAAGV,GAAG,CAACW,IAAJ,CAASD,WAA7B;AACA,QAAME,WAAW,GAAGZ,GAAG,CAACW,IAAJ,CAASC,WAA7B;AAEA,QAAMC,MAAM,GAAG,MAAMjB,iBAAiB,EAAtC;AAEA,QAAMkB,cAAc,GAAGD,MAAM,CAACE,EAAP,GAAYC,UAAZ,CAAuB,OAAvB,CAAvB;AAEA,QAAMR,IAAI,GAAG,MAAMM,cAAc,CAACG,OAAf,CAAuB;AAAER,IAAAA,KAAK,EAAEF;AAAT,GAAvB,CAAnB;;AAEA,MAAI,CAACC,IAAL,EAAW;AACTP,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAO,IAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,QAAMC,eAAe,GAAGX,IAAI,CAACY,QAA7B;AAEA,QAAMC,gBAAgB,GAAG,MAAMvB,cAAc,CAACY,WAAD,EAAcS,eAAd,CAA7C;;AAEA,MAAI,CAACE,gBAAL,EAAuB;AACrBR,IAAAA,MAAM,CAACK,KAAP;AACAjB,IAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACD;;AAED,QAAMgB,cAAc,GAAG,MAAMzB,YAAY,CAACe,WAAD,CAAzC;AAEA,QAAMW,MAAM,GAAG,MAAMT,cAAc,CAACU,SAAf,CACnB;AAAEf,IAAAA,KAAK,EAAEF;AAAT,GADmB,EAEnB;AAAEkB,IAAAA,IAAI,EAAE;AAAEL,MAAAA,QAAQ,EAAEE;AAAZ;AAAR,GAFmB,CAArB;AAKAT,EAAAA,MAAM,CAACK,KAAP;AACAjB,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,OAAO,EAAG;AAAX,GAArB;AACD;;AAED,eAAeP,OAAf","sourcesContent":["import { getSession } from \"next-auth/client\";\nimport { connectToDatabase } from \"../../../lib/db\";\nimport { hassPassword, verifyPassword } from \"../../../lib/auth\";\nasync function handler(req, res) {\n  if (req.method !== \"PATCH\") {\n    return;\n  }\n\n  const session = await getSession({ req: req });\n\n  if (!session) {\n    res.status(401).json({ message: \"Authentication is missing !\" });\n    return;\n  }\n\n  const userEmail = session.user.email;\n  const oldPassword = req.body.oldPassword;\n  const newPassword = req.body.newPassword;\n\n  const client = await connectToDatabase();\n\n  const userCollection = client.db().collection(\"users\");\n\n  const user = await userCollection.findOne({ email: userEmail });\n\n  if (!user) {\n    res.status(404).json({ message: \"User Not Found !\" });\n    client.close();\n    return;\n  }\n\n  const currentPassword = user.password;\n\n  const passwordAreEqual = await verifyPassword(oldPassword, currentPassword);\n\n  if (!passwordAreEqual) {\n    client.close();\n    res.status(403).json({ message: \"Invalid Password !\" });\n    return;\n  }\n\n  const hashedPassword = await hassPassword(newPassword);\n\n  const result = await userCollection.updateOne(\n    { email: userEmail },\n    { $set: { password: hashedPassword } }\n  );\n\n  client.close()\n  res.status(200).json({message : \"Password Updated !\"})\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}